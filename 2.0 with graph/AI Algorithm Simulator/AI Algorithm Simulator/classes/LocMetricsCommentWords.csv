Word,Count
for,35
path,27
ant,23
each,20
of,17
and,17
if,15
that,15
to,14
update,13
in,12
add,12
all,12
best,12
phermone,11
get,10
fitness,9
paths,9
used,9
go,8
through,8
f,8
child,8
initialize,7
data,7
city,7
UI,7
with,7
from,6
value,6
working,6
not,6
foreach,6
store,6
maximum,6
soln,6
the,6
=,6
ants,6
take,6
lock,6
+,6
pheromone,6
a,6
uilock,5
{,5
algorithm,5
public,5
\returnalgoobj(),\,5
info);,5
find,5
it,5
worst,5
cost-time,5
},5
cache,4
run,4
function,4
works,4
\false,\,4
no,4
instance/static,4
i,4
constructor,4
global,4
cities,4
subtract,4
\item,\,4
into,4
delegate,4
turn,4
methods,4
\UIDispatcher.BeginInvoke(updater,\,4
secondary,3
edge,3
when,3
list,3
last,3
create,3
took,3
params,3
ith,3
is,3
control,3
reaching,3
initial,3
Environment.NewLine,3
subject,3
which,3
end;,3
cost,3
ie,3
only,3
parent,3
position,3
send,3
random,3
metrics,3
c,3
do:,3
object,3
tour,3
call,3
subjects,3
input,2
parent2,2
has,2
end,2
return,2
(int,2
primary,2
combined,2
do,2
move,2
new,2
mode,2
pheromones,2
its,2
exec,2
order,2
parent1,2
6,2
two,2
iteration,2
between,2
other,2
should,2
swap,2
using,2
implemented,2
lambda,2
traversed,2
on,2
put,2
animation,2
Thread.Sleep(100);,2
too,2
kth,2
swath,2
expression,2
base,2
keeping,2
time,2
set,2
0;,2
*,2
be,2
swaths,2
check,2
4,2
starting,2
sort,2
ascending,2
influence,2
relieved,2
<,2
\,k\,2
track,2
as,2
calc,2
already,2
k’s,2
until,2
2,2
first,2
probability,2
fr,2
sorting,2
mutliplying,2
j,2
place,2
while,2
always,1
modify,1
evaporation,1
city;,1
\"\Step1"\\,1
at,1
g;,1
selected,1
updater,1
RawValue,1
directly,1
apply,1
(ant,1
specific,1
constructsoln(Workingset[j]);,1
\anim,2-secondary\,1
clear,1
constructors,1
least->most,1
\j,\,1
iterations,1
void,1
construc,1
timers,1
---baseprob,1
sorted,1
pheromones;,1
\UIDispatcher.BeginInvoke(Ant_updater,\,1
\"\Step4"\;\,1
need,1
details,1
user,1
evaporate,1
locks,1
optimize,1
hav,1
func,1
i++),1
type,1
expecting,1
tour:,1
q,1
every,1
enter,1
colony,1
multiple,1
shorter,1
updaters,1
available,1
completed,1
according,1
Random();,1
slide,1
population,1
//get,1
cost/time,1
evrythin,1
location,1
j++),1
//call,1
//wait,1
functions,1
genomes,1
editing,1
(UI_lock),1
highest,1
instant,1
dispatcher,1
info,1
constant,1
than,1
element,1
Random,1
E,1
\"\Step3"\\,1
lines,1
properties,1
int,1
update;,1
complete,1
single,1
updating,1
\"\Step2"\\,1
drawing,1
this.city_details.Count);,1
(small),1
parallely,1
sleep,1
mutated,1
city_details.Count,1
sum,1
UpdateProgressDelegate;,1
rd,1
solution,1
if(workingset[j].Data.Count==0),1
true;,1
///call,1
randomly,1
\cost,time,cost-time\,1
accessing,1
now,1
next,1
can,1
init,1
edges,1
1;,1
by,1
;,1
solution),1
\anim,1-primary\,1
parents,1
/create,1
Workingset[j].addcity(city_details[no]);,1
where,1
after,1
both,1
remove,1
0-,1
Initialize();//init,1
UI_lock,1
w-1,1
inherited,1
Workingset.Count;,1
positions,1
done,1
get;,1
so,1
\data,lovation\,1
wait,1
1,1
necessary,1
loop,1
static,1
coefficient;,1
elements,1
safe,1
private,1
\rd.Next(0,\,1
gunc,1
-,1
moves,1
calculate,1
/calc,1
cost/time/cost-time,1
costtime,1
0,1
>=1,1
pxy^beta,1
fxy^,1
algo,1
chosen,1
dipatcher,1
>=0,1
alpha,1
construct,1
initially,1
or,1
andgenerate,1
abstract,1
Delegate,1
classes,1
facilitate,1
possible,1
execute,1
number,1
thread,1
Workingset.Reverse();//reverse,1
anim,1
level,1
τ0;,1
required,1
,1
